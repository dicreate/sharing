Да, вы можете реализовать рендеринг подстрок (subrow) в TanStack Table с использованием `parentId`. Это потребует немного настройки, но это вполне возможно. Вот общая схема, как это можно сделать.

### Шаги для реализации

1. **Структура данных**: Убедитесь, что ваши данные имеют необходимую структуру. Например, каждый объект может иметь `id`, `parentId`, и другие поля.

   ```javascript
   const data = [
     { id: 1, parentId: null, name: 'Parent 1' },
     { id: 2, parentId: 1, name: 'Child 1-1' },
     { id: 3, parentId: 1, name: 'Child 1-2' },
     { id: 4, parentId: null, name: 'Parent 2' },
     { id: 5, parentId: 4, name: 'Child 2-1' },
   ];
   ```

2. **Функция для получения подстрок**: Создайте функцию, которая возвращает подстроки в зависимости от `parentId`.

   ```javascript
   const getSubrows = (parentId) => {
     return data.filter(row => row.parentId === parentId);
   };
   ```

3. **Настройка TanStack Table**: Настройте таблицу для рендеринга подстрок. В разделе определения колонок добавьте логику для отображения подстрок.

   ```javascript
   const columns = [
     {
       accessorKey: 'name',
       header: 'Name',
       cell: ({ row }) => {
         const subrows = getSubrows(row.original.id);
         return (
           <>
             {row.getIsExpanded() ? (
               <div>
                 {row.getValue('name')}
                 <div style={{ marginLeft: '20px' }}>
                   {subrows.map(subrow => (
                     <div key={subrow.id}>{subrow.name}</div>
                   ))}
                 </div>
               </div>
             ) : (
               row.getValue('name')
             )}
           </>
         );
       },
     },
   ];
   ```

4. **Рендеринг таблицы**: Используйте `useReactTable` от TanStack для создания таблицы и передайте данные и колонки.

   ```javascript
   import { useReactTable } from '@tanstack/react-table';

   const table = useReactTable({
     data,
     columns,
   });
   ```

5. **Развертывание строк**: Убедитесь, что строки могут разворачиваться для отображения подстрок, добавьте обработчики событий.

   ```javascript
   return (
     <table>
       <thead>
         {table.getHeaderGroups().map(headerGroup => (
           <tr key={headerGroup.id}>
             {headerGroup.headers.map(column => (
               <th key={column.id}>{column.render('header')}</th>
             ))}
           </tr>
         ))}
       </thead>
       <tbody>
         {table.getRowModel().rows.map(row => (
           <React.Fragment key={row.id}>
             <tr onClick={() => row.toggleExpanded()}>
               {row.getVisibleCells().map(cell => (
                 <td key={cell.id}>{cell.render('cell')}</td>
               ))}
             </tr>
           </React.Fragment>
         ))}
       </tbody>
     </table>
   );
   ```

### Заключение

Таким образом, вы можете использовать `parentId` для рендеринга подстрок в TanStack Table. Убедитесь, что обработка развертывания строк и отображение подстрок сделаны правильно, чтобы пользователи могли видеть нужную информацию. Если у вас есть дополнительные вопросы или нужно уточнить, не стесняйтесь спрашивать!