Для создания компонента, который использует `react-dropzone` и `Chakra UI` с поддержкой TypeScript, мы можем следовать следующему примеру. Компонент будет принимать `onDrop` как пропс и отображать красиво оформленный список добавленных файлов.

### Пример кода:

```tsx
import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import {
  Box,
  Flex,
  Text,
  IconButton,
  Image,
  VStack,
  Button,
} from '@chakra-ui/react';
import { CloseIcon } from '@chakra-ui/icons';

interface FileUploaderProps {
  onDrop: (acceptedFiles: File[]) => void;
}

const FileUploader: React.FC<FileUploaderProps> = ({ onDrop }) => {
  const [files, setFiles] = useState<File[]>([]);

  const { getRootProps, getInputProps } = useDropzone({
    onDrop: (acceptedFiles) => {
      setFiles((prev) => [...prev, ...acceptedFiles]);
      onDrop(acceptedFiles); // Вызов пропса onDrop
    },
  });

  const removeFile = (fileToRemove: File) => {
    setFiles(files.filter(file => file !== fileToRemove));
  };

  return (
    <VStack spacing={4}>
      <Box
        {...getRootProps()}
        borderWidth={2}
        borderColor="gray.300"
        borderStyle="dashed"
        borderRadius="md"
        p={4}
        width="100%"
        textAlign="center"
        cursor="pointer"
      >
        <input {...getInputProps()} />
        <Text>Перетащите файлы сюда или нажмите для выбора</Text>
      </Box>
      
      {files.length > 0 && (
        <VStack spacing={2} alignItems="flex-start" width="100%">
          {files.map((file) => (
            <Flex key={file.name} alignItems="center" width="100%">
              <Image
                src={URL.createObjectURL(file)}
                alt={file.name}
                boxSize="50px"
                objectFit="cover"
                borderRadius="md"
              />
              <Text flex="1" ml={4}>{file.name}</Text>
              <IconButton
                aria-label="Удалить файл"
                icon={<CloseIcon />}
                onClick={() => removeFile(file)}
                variant="outline"
                colorScheme="red"
              />
            </Flex>
          ))}
        </VStack>
      )}
    </VStack>
  );
};

export default FileUploader;
```

### Объяснение:

1. **Типы**: Используем интерфейс `FileUploaderProps` для определения типа пропса `onDrop`, который принимает массив файлов.

2. **Состояние**: Используем `useState` для хранения загруженных файлов в массиве.

3. **useDropzone**: Хук `useDropzone` от `react-dropzone` позволяет управлять загрузкой файлов. Мы вызываем `onDrop` при добавлении файлов.

4. **Удаление файлов**: `removeFile` позволяет удалить конкретный файл из состояния.

5. **UI**: Интерфейс содержит область перетаскивания и список добавленных файлов с изображениями, именами и кнопками для удаления.

### Использование:

Теперь вы можете использовать `<FileUploader onDrop={yourHandleFunction} />` в вашем приложении, где `yourHandleFunction` — это функция, обрабатывающая загруженные файлы.